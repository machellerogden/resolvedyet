// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var DomainsViewModel, socket;

  socket = io.connect('/resolvedyet');

  DomainsViewModel = (function() {

    function DomainsViewModel() {
      this.domainQuery = $.observable('');
      this.resultToAdd = $.observableArray([]);
      this.allResults = $.observableArray([]);
      this.startMonitor = function() {
        return socket.emit('startmonitor', this.domainQuery());
      };
      this.addResult = function() {
        var current, k, key, now, result, results, rm, v, _i, _len;
        results = this.allResults();
        result = this.resultToAdd();
        now = $.moment().format('h:mma');
        key = $.indexOf(this.allDomains(), result.domain);
        if (key !== -1) {
          current = results[key];
          for (v = _i = 0, _len = current.length; _i < _len; v = ++_i) {
            k = current[v];
            if (k === 'domain') return;
            if (k === 'mx') {
              if ($.isString(v[0])) {
                current[k] = v[0];
              } else {
                current[k] = $.map(v, function(i) {
                  return JSON.stringify(i);
                }).join(', ');
              }
              if ($.isString(result[k][0])) {
                result[k] = result[k][0];
              } else {
                rm = $.map(result.mx, function(i) {
                  return JSON.stringify(i);
                }).join(', ');
              }
            } else {
              current[k] = v.join(', ');
              result[k] = v.join(', ');
            }
          }
          if ((current.ns === result.ns) && (!current.nschanged)) {
            result.nameserverText = current.ns;
            result.nschanged = false;
            result.nscls = current.nscls;
          } else {
            result.nameserverText = result.ns;
            result.nschanged = true;
            result.nscls = 'listing changed';
          }
          if ((current.a === result.a) && (!current.achanged)) {
            result.arecordsText = current.a;
            result.achanged = false;
            result.acls = current.acls;
          } else {
            result.arecordsText = result.a;
            result.achanged = true;
            result.acls = 'listing changed';
          }
          if ((current.cname === result.cname) && (!current.cchanged)) {
            result.crecordsText = current.cname;
            result.cchanged = false;
            result.ccls = current.ccls;
          } else {
            result.crecordsText = result.cname;
            result.cchanged = true;
            result.ccls = 'listing changed';
          }
          if ((current.mx === result.mx) && (!current.mxchanged)) {
            result.mxrecordsText = current.mx;
            result.mxchanged = false;
            result.mxcls = current.mxcls;
          } else {
            result.mxrecordsText = result.mx;
            result.mxchanged = true;
            result.mxcls = 'listing changed';
          }
          if (result.nschanged || results.achanged || result.cchanged || result.mxchanged) {
            result.ts = current.ts;
            result.meta = 'CHANGED - This record changed at ' + result.ts;
          } else {
            result.ts = now;
            result.meta = 'UNCHANGED - Last checked at ' + result.ts;
          }
          results[key] = result;
          this.allResults(results);
        } else {
          result.nameserverText = result.ns.join(', ');
          result.arecordsText = result.a.join(', ');
          result.crecordsText = result.cname.join(', ');
          if ($.isString(result.mx[0])) {
            result.mxrecordsText = result.mx[0];
          } else {
            result.mxrecordsText = $.map(result.mx, function(i) {
              return JSON.stringify(i);
            }).join(', ');
          }
          result.ts = now;
          result.meta = 'NOW MONITORING - Last checked at ' + result.ts;
          result.nschanged = false;
          result.achanged = false;
          result.cchanged = false;
          result.mxchanged = false;
          result.nscls = 'listing unchanged';
          result.acls = 'listing unchanged';
          result.ccls = 'listing unchanged';
          result.mxcls = 'listing unchanged';
          this.allResults.unshift(result);
        }
        return this.domainQuery("");
      };
      this.allDomains = function() {
        return $.pluck(this.allResults(), 'domain');
      };
    }

    return DomainsViewModel;

  })();

  $.domReady(function() {
    var domains;
    domains = new DomainsViewModel();
    $.applyBindings(domains);
    $('#domain').get(0).focus();
    socket.emit('connect');
    socket.on('notify', function(title, msg) {
      return alert(msg);
    });
    return socket.on('updatedrecords', function(result) {
      domains.resultToAdd(result);
      domains.addResult();
      return $('#domain').get(0).focus();
    });
  });

}).call(this);
